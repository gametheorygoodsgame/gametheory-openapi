name: Build and Publish Swagger Node Package

on:
  push:
    branches:
      - main

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install Dependencies
        run: npm install

      - name: Download OpenAPI Generator CLI
        run: |
          mkdir -p openapi-generator-cli
          curl -L -o openapi-generator-cli/openapi-generator-cli.jar https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.5.0/openapi-generator-cli-7.5.0.jar

      - name: Show Available Node and NPM Versions
        run: |
          node --version
          npm --version

      - name: Validate Swagger Specification
        run: npx swagger-cli validate GameTheoryAPI.yaml

      - name: Generate Controllers and Services
        run: |
          java -jar openapi-generator-cli/openapi-generator-cli.jar generate -i GameTheoryAPI.yaml -g nodejs-express-server -o generated-code

      - name: Generate TypeScript Declaration Files
        run: |
          cd generated-code
          npx -p typescript tsc **/*.js --declaration --allowJs --emitDeclarationOnly --outDir ./../types
        shell: /usr/bin/bash -e {0}

      - name: Generate Api and Models
        run: |
          java -jar openapi-generator-cli/openapi-generator-cli.jar generate -i GameTheoryAPI.yaml -g typescript-axios -o generated-code

      - name: Update package.json with API Version
        run: |
          cd generated-code
          
          # Read the API_VERSION from the GameTheoryAPI.yaml file
          API_VERSION=$(yq -r .info.version ../GameTheoryAPI.yaml)
          
          # Read the root package.json
          ROOT_PACKAGE_JSON=$(<../package.json)
          
          # Merge the API_VERSION into the root package.json
          UPDATED_ROOT_PACKAGE_JSON=$(echo "$ROOT_PACKAGE_JSON" | jq --arg api_version "$API_VERSION" '.version = $api_version')
          
          # Read the target package.json
          TARGET_PACKAGE_JSON=$(<package.json)
          
          # Merge the updated root package.json into the target package.json, preserving existing data
          NEW_PACKAGE_JSON=$(jq --argjson updated "$UPDATED_ROOT_PACKAGE_JSON" '. * $updated' <<< "$TARGET_PACKAGE_JSON")
          
          # Remove the "private" field
          NEW_PACKAGE_JSON=$(jq 'del(.private)' <<< "$NEW_PACKAGE_JSON")
          
          # Save the updated package.json to the target package.json file
          echo "$NEW_PACKAGE_JSON" > package.json
          cat package.json
        shell: /usr/bin/bash -e {0}

      - name: Show Generated Code Contents
        run: ls -l generated-code

      - name: Publish JS-Package
        run: |
          cd generated-code
          npm publish --registry=https://npm.pkg.github.com
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Show Generated Code Contents
        run: ls -l generated-code